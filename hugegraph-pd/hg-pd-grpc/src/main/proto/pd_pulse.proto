/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

import "metapb.proto";
import "pd_common.proto";

option java_multiple_files = true;
option java_package = "org.apache.hugegraph.pd.grpc.pulse";
option java_outer_classname = "HgPdPulseProto";

service HgPdPulse {
  rpc Pulse(stream PulseRequest) returns (stream PulseResponse);
}

/* requests */
message PulseRequest {
  PulseCreateRequest create_request = 1;
  PulseCancelRequest cancel_request = 2;
  PulseNoticeRequest notice_request = 3;
  PulseAckRequest ack_request = 4;
}

message PulseCreateRequest {
  PulseType  pulse_type = 1;
}

message PulseCancelRequest {
  int64 observer_id = 1;
}

message PulseNoticeRequest {
  int64 observer_id = 1;
  oneof request_union {
    PartitionHeartbeatRequest partition_heartbeat_request = 10;
  }
}

message PulseAckRequest {
  int64 observer_id = 1;
  int64 notice_id = 2;
}

// When an event such as a partition heartbeat occurs such as the increase or decrease of peers in a partition or the change of leader, the leader sends a heartbeat.
// At the same time, the pd adds or decreases shards to the partition and sends the response to the leader
message PartitionHeartbeatRequest {
  RequestHeader header = 1;
  // Leader Peer sending the heartbeat
  metapb.PartitionStats states = 4;
}

/* responses */
message PulseResponse {
  PulseType pulse_type = 1;
  int64 observer_id = 2;
  int32 status = 3;   //0=ok,1=fail
  int64 notice_id = 4;
  oneof response_union {
    PartitionHeartbeatResponse partition_heartbeat_response = 10;
    PdInstructionResponse instruction_response = 11;
  }
}

message PartitionHeartbeatResponse {
  ResponseHeader header = 1;
  uint64 id = 3;
  metapb.Partition partition = 2;
  ChangeShard change_shard = 4;

  TransferLeader transfer_leader = 5;
  // Split into multiple partitions, with the first SplitPartition being the original partition and the second starting being the new partition
  SplitPartition split_partition = 6;
  // rocksdb compaction specifies the table, null is for all
  DbCompaction db_compaction = 7;
  // Migrate data from the partition to the target
  MovePartition move_partition = 8;
  // Clean up the data for the partition of the graph
  CleanPartition clean_partition = 9;
  // partition key range variation
  PartitionKeyRange key_range = 10;
}

/* Date model */
message ChangeShard {
  repeated metapb.Shard shard = 1;
  ConfChangeType change_type = 2;
}

message TransferLeader {
  metapb.Shard shard = 1;
}

message SplitPartition {
  repeated metapb.Partition new_partition = 1;
}

message DbCompaction {
  string table_name = 3;
}

message MovePartition {
  // The new range after migration
  metapb.Partition target_partition = 1;
  // partition's key start and key end,
  // will migrate to target partition
  uint64 key_start = 2;
  uint64 key_end = 3;
}

message CleanPartition {
  uint64 key_start = 1;
  uint64 key_end = 2;
  CleanType clean_type = 3;
  bool delete_partition = 4; // Whether to delete the partition
}

message PartitionKeyRange{
  uint32 partition_id = 1;
  uint64 key_start = 2;
  uint64 key_end = 3;
}

message PdInstructionResponse {
  PdInstructionType instruction_type = 1;
  string leader_ip = 2;
}

/* enums */
enum PulseType {
  PULSE_TYPE_UNKNOWN = 0;
  PULSE_TYPE_PARTITION_HEARTBEAT = 1;
  PULSE_TYPE_PD_INSTRUCTION = 2;
}

enum PulseChangeType {
  PULSE_CHANGE_TYPE_UNKNOWN = 0;
  PULSE_CHANGE_TYPE_ADD = 1;
  PULSE_CHANGE_TYPE_ALTER = 2;
  PULSE_CHANGE_TYPE_DEL = 3;
}

enum ConfChangeType {
  CONF_CHANGE_TYPE_UNKNOWN = 0;
  CONF_CHANGE_TYPE_ADD_NODE = 1;
  CONF_CHANGE_TYPE_REMOVE_NODE = 2;
  CONF_CHANGE_TYPE_ADD_LEARNER_NODE = 3;
  CONF_CHANGE_TYPE_ADJUST = 4;    // Adjust the shard, and the leader dynamically increases or decreases according to the new configuration.
}

enum CleanType {
  CLEAN_TYPE_KEEP_RANGE = 0; // Only this range remains
  CLEAN_TYPE_EXCLUDE_RANGE = 1; // Delete this range
}

enum PdInstructionType {
  CHANGE_TO_FOLLOWER = 0;
}
