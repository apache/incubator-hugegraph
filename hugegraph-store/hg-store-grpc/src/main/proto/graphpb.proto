/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package graph_pb;

option java_package = "org.apache.hugegraph.store.grpc";

service GraphStore {
  rpc ScanPartition(stream ScanPartitionRequest) returns (stream ScanResponse){}
}

message ScanPartitionRequest{
  enum ScanType{
    SCAN_UNKNOWN = 0;
    SCAN_VERTEX = 1;
    SCAN_EDGE = 2;
  }
  // Request parameters
  message Request{
    ScanType scan_type = 1;
    string graph_name = 2;
    uint32 partition_id = 3;
    uint32 start_code = 4;
    uint32 end_code = 5;
    // Filter conditions
    string condition = 6;
    string table = 7;
    int64 limit = 8;
    int32 boundary = 9;
    bytes position = 10;
    // Return condition
    repeated int64 properties = 11;
  }


  message Reply{
    int32 seq_no = 1;
  }
  RequestHeader header = 1;
  oneof request {
    Request scan_request = 2;
    // Each time a data packet is consumed, notify the server once, return the message sequence number
    Reply reply_request = 4;
  }
}

message ScanResponse{
  ResponseHeader header = 1;
  // Message Sequence Number
  int32     seq_no = 2;
  repeated  Vertex vertex = 3;
  repeated  Edge edge = 4;
}


message Property{
  uint64 label = 1;
  Variant value = 2;
}

message Vertex{
  int64 label = 1; // Point type
  Variant id = 2;  // Point ID
  repeated Property properties = 3; // Point properties
}

message Edge{
  int64 label = 1;        // Edge type
  int64 sourceLabel = 2;
  int64 targetLabel = 3;
  Variant source_id = 4;  // Source point ID
  Variant target_id = 5;  // Target point ID

  repeated Property properties = 6; // Edge properties
}

message Variant {
  optional VariantType type = 1;
  optional int32 value_int32 = 2;
  optional int64 value_int64 = 3;
  optional float value_float = 4;
  optional double value_double = 5;
  optional string value_string = 6;
  optional bytes value_bytes = 7;
  optional string value_datetime = 8;
  optional bool value_boolean = 9;
}

enum VariantType {
  VT_UNKNOWN = 0;
  VT_BOOLEAN = 1;
  VT_INT = 2;
  VT_LONG = 3;
  VT_FLOAT = 4;
  VT_DOUBLE = 7;
  VT_STRING = 8;
  VT_BYTES = 9;
  VT_DATETIME = 10;
}



message RequestHeader {
  // Sender ID.
  uint64 sender_id = 2;
}

message ResponseHeader {
  uint64 sender_id = 1;
  Error error = 2;
}


enum ErrorType {
  OK = 0;
  UNKNOWN = 1;
}

message Error {
  ErrorType type = 1;
  string message = 2;
}
