/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.apache.hugegraph.store.grpc.session";
option java_outer_classname = "HgStoreSessionProto";

import "store_common.proto";
import "store_stream_meta.proto";

service HgStoreSession {
  rpc Get2(GetReq) returns (FeedbackRes) {}
  rpc BatchGet2(BatchGetReq) returns (FeedbackRes) {}
  rpc Batch(BatchReq) returns (FeedbackRes){}
  rpc Table(TableReq) returns (FeedbackRes){};
  rpc Graph(GraphReq) returns (FeedbackRes){};
  rpc Clean(CleanReq) returns (FeedbackRes) {}
  rpc Count(ScanStreamReq) returns (Agg) {}
}

message TableReq{
  Header header = 1;
  TableMethod method = 2;
  string table_name = 3;
}

message GraphReq{
  Header header = 1;
  GraphMethod method = 2;
  string graph_name = 3;
}

message BatchReq{
  Header header = 1;
  string batch_id = 2;
  oneof requests{
    BatchWriteReq write_req = 10;
    BatchCommitReq commit_req = 11;
    BatchRollbackReq rollback_req = 12;
  }
}

message BatchWriteReq{
  repeated BatchEntry entry = 1;
}

message BatchCommitReq{}

message BatchRollbackReq{}

message BatchEntry{
  OpType op_type = 1;
  int32 table = 2;
  Key start_key = 3;
  Key end_key = 4;
  bytes value = 5;
}

message BatchGetReq {
  Header header = 1;
  string table = 2;
  repeated Key key = 3;
  int32 partition = 9;
}

message GetReq {
  Header header = 1;
  Tk tk = 2;
}

message CleanReq{
  Header header = 1;
  int32 partition = 2;
}


message FeedbackRes {
  ResStatus status = 1;

  oneof responses{
    PartitionFaultResponse partition_fault_response = 10;
    ValueResponse value_response = 11;
    KeyValueResponse key_value_response = 12;
  }

}

message ValueResponse {
  bytes value = 1;
}

message KeyValueResponse {
  repeated Kv kv = 1;
}

message PartitionFaultResponse{
  PartitionFaultType fault_type = 1;
  repeated PartitionLeader partition_leaders = 2;
  repeated int32 partition_ids = 3;
}

message PartitionLeader {
  int32 partitionId = 2;
  int64 leaderId = 3;
}

enum PartitionFaultType{
  PARTITION_FAULT_TYPE_UNKNOWN = 0;
  // Currently not the Leader, return the store where the Leader is located.
  PARTITION_FAULT_TYPE_NOT_LEADER = 1;
  // Wait for Leader timeout, possibly raft group creation failed
  PARTITION_FAULT_TYPE_WAIT_LEADER_TIMEOUT = 2;
  // Partition does not belong to this machine
  PARTITION_FAULT_TYPE_NOT_LOCAL = 3;

}
message Agg {
  Header header = 1;
  int64 count = 2;
}
